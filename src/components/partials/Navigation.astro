---
import TraslucentContainer from "../containers/TraslucentContainer.astro";

interface NavigationLinks {
    title: string;
    label?: string;
    href: string;
}

const navigationLinks: NavigationLinks[] = [
    {
        title: "Home",
        label: "home",
        href: "/#",
    },
    {
        title: "Projects",
        label: "projects",
        href: "/#projects",
    },
    {
        title: "Experience",
        label: "experience",
        href: "/#experience",
    },
    {
        title: "Stacks",
        label: "stacks",
        href: "/#stacks",
    },
    {
        title: "About Me",
        label: "about-me",
        href: "/#about-me",
    },
];
---

<header
    class="container fixed flex items-center justify-center mt-3 mx-auto text-white w-full top-0 left-0 right-0 z-10"
>
    <TraslucentContainer>
        <nav class="flex flex-row justify-between">
            <ul>
                {
                    navigationLinks.map(({ title, href, label }) => (
                        <li class="inline-block">
                            <a
                                class="inline-block px-2 py-1 transition-colors duration-300 hover:text-sky-500"
                                aria-label={label}
                                href={href}
                            >
                                {title}
                            </a>
                        </li>
                    ))
                }
            </ul>
        </nav>
    </TraslucentContainer>
</header>

<script>
    const navItems = document.querySelectorAll("nav>ul>li>a");
    const observerOptions: IntersectionObserverInit = {
        root: null,
        rootMargin: "0px",
        threshold: 0.7,
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
            const { isIntersecting } = entry;

            if (isIntersecting) {
                navItems.forEach((item) => {
                    const label = item.getAttribute("aria-label");
                    if (label === entry.target.id) {
                        item.classList.add("text-sky-500");
                    } else {
                        item.classList.remove("text-sky-500");
                    }
                });
            }
        });
    }, observerOptions);

    const sections = document.querySelectorAll("section[id]");
    sections.forEach((section) => {
        observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
        if (document.visibilityState === "hidden") {
            observer.disconnect();
        } else {
            sections.forEach((section) => {
                observer.observe(section);
            });
        }
    };
</script>
